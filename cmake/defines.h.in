// Copyright 2020-2025 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/***********************************************************************************************************************
 * @file
 * @brief Common Nets library functions.
 */

#pragma once
#include <stdint.h>
#include <stdlib.h>
#include <assert.h>
#include <stdbool.h>

#define __NETS__

#define NETS_VERSION_MAJOR @nets_VERSION_MAJOR@
#define NETS_VERSION_MINOR @nets_VERSION_MINOR@
#define NETS_VERSION_PATCH @nets_VERSION_PATCH@

#define NETS_SUPPORT_OPENSSL @NETS_SUPPORT_OPENSSL@
#define NETS_SUPPORT_DEPRECATED_SSL @NETS_SUPPORT_DEPRECATED_SSL@

#define NETS_LITTLE_ENDIAN @NETS_LITTLE_ENDIAN@

#if __linux__
#include <byteswap.h>
#define swapBytes16(x) bswap_16(x)
#define swapBytes32(x) bswap_32(x)
#define swapBytes64(x) bswap_64(x)
#elif __APPLE__
#include <libkern/OSByteOrder.h>
#define swapBytes16(x) OSSwapInt16(x)
#define swapBytes32(x) OSSwapInt32(x)
#define swapBytes64(x) OSSwapInt64(x)
#elif _WIN32
#include <stdlib.h>
#define swapBytes16(x) _byteswap_ushort(x)
#define swapBytes32(x) _byteswap_ulong(x)
#define swapBytes64(x) _byteswap_uint64(x)
#endif

#if NETS_LITTLE_ENDIAN
#define hostToNet16(x) swapBytes16(x)
#define hostToNet32(x) swapBytes32(x)
#define hostToNet64(x) swapBytes64(x)
#define netToHost16(x) swapBytes16(x)
#define netToHost32(x) swapBytes32(x)
#define netToHost64(x) swapBytes64(x)

#define hostToLE16(x) (uint16_t)(x)
#define hostToLE32(x) (uint32_t)(x)
#define hostToLE64(x) (uint64_t)(x)
#define leToHost16(x) (uint16_t)(x)
#define leToHost32(x) (uint32_t)(x)
#define leToHost64(x) (uint64_t)(x)
#else
#define hostToNet16(x) (uint16_t)(x)
#define hostToNet32(x) (uint32_t)(x)
#define hostToNet64(x) (uint64_t)(x)
#define netToHost16(x) (uint16_t)(x)
#define netToHost32(x) (uint32_t)(x)
#define netToHost64(x) (uint64_t)(x)

#define hostToLE16(x) swapBytes16(x)
#define hostToLE32(x) swapBytes32(x)
#define hostToLE64(x) swapBytes64(x)
#define leToHost16(x) swapBytes16(x)
#define leToHost32(x) swapBytes32(x)
#define leToHost64(x) swapBytes64(x)
#endif

/***********************************************************************************************************************
 * @brief Nets result type.
 */
typedef enum NetsResult_T
{
	SUCCESS_NETS_RESULT = 0,
	IN_PROGRESS_NETS_RESULT = 1,
	NETWORK_IS_NOT_INITIALIZED_NETS_RESULT = 2,
	OUT_OF_MEMORY_NETS_RESULT = 3,
	OUT_OF_DESCRIPTORS_NETS_RESULT = 4,
	NOT_SUPPORTED_NETS_RESULT = 5,
	NO_ACCESS_NETS_RESULT = 6,
	ADDRESS_IS_ALREADY_IN_USE_NETS_RESULT = 7,
	BAD_ADDRESS_NETS_RESULT = 8,
	BAD_DATA_NETS_RESULT = 9,
	FAILED_TO_SET_FLAG_NETS_RESULT = 10,
	ALREADY_CONNECTED_NETS_RESULT = 11,
	CONNECTION_IS_REFUSED_NETS_RESULT = 12,
	CONNECTION_IS_ABORTED_NETS_RESULT = 13,
	CONNECTION_IS_RESET_NETS_RESULT = 14,
	CONNECTION_IS_CLOSED_NETS_RESULT = 15,
	NETWORK_IS_NOT_REACHABLE_NETS_RESULT = 16,
	HOST_IS_NOT_REACHABLE_NETS_RESULT = 17,
	TIMED_OUT_NETS_RESULT = 18,
	INTERRUPTED_NETS_RESULT = 19,
	FAILED_TO_RESOLVE_ADDRESS_NETS_RESULT = 20,
	FAILED_TO_CREATE_SSL_NETS_RESULT = 21,
	FAILED_TO_LOAD_CERTIFICATE_NETS_RESULT = 22,
	NO_OPENSSL_SUPPORT_NETS_RESULT = 23,
	UNKNOWN_ERROR_NETS_RESULT = 24,
	NETS_RESULT_COUNT = 25,
} NetsResult_T;
typedef uint8_t NetsResult; /**< Nets result type. */

/**
 * @brief Nets result strings.
 */
static const char* const netsResultStrings[NETS_RESULT_COUNT] = {
	"Success",
	"In progress",
	"Network is not initialized",
	"Out of memory",
	"Out of descriptors",
	"Not supported",
	"No access",
	"Address is already in use",
	"Bad address",
	"Bad data",
	"Failed to set flag",
	"Already connected",
	"Connection is refused",
	"Connection is aborted",
	"Connection is reset",
	"Connection is closed",
	"Network is not reachable",
	"Host is not reachable",
	"Timed out",
	"Interrupted",
	"Failed to resolve address",
	"Failed to create SSL",
	"Failed to load certificate",
	"No OpenSSL support",
	"Unknown error",
};

/**
 * @brief Returns Nets result as string.
 * @param result target Nets result
 */
inline static const char* netsResultToString(NetsResult result)
{
	if (result >= NETS_RESULT_COUNT)
		return "Unknown Nets result";
	return netsResultStrings[result];
}