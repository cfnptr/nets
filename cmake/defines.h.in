// Copyright 2020-2021 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#include <stdint.h>
#include <stdlib.h>
#include <assert.h>

#define __MPNW__

#define MPNW_VERSION_MAJOR @mpnw_VERSION_MAJOR@
#define MPNW_VERSION_MINOR @mpnw_VERSION_MINOR@
#define MPNW_VERSION_PATCH @mpnw_VERSION_PATCH@

#define MPNW_SUPPORT_OPENSSL @MPNW_SUPPORT_OPENSSL@
#define MPNW_SUPPORT_DEPRECATED_SSL @MPNW_SUPPORT_DEPRECATED_SSL@

#define MPNW_LITTLE_ENDIAN @MPNW_LITTLE_ENDIAN@

#if __linux__
#include <byteswap.h>
#define swapBytes16(x) bswap_16(x)
#define swapBytes32(x) bswap_32(x)
#define swapBytes64(x) bswap_64(x)
#elif __APPLE__
#include <libkern/OSByteOrder.h>
#define swapBytes16(x) OSSwapInt16(x)
#define swapBytes32(x) OSSwapInt32(x)
#define swapBytes64(x) OSSwapInt64(x)
#elif _WIN32
#include <stdlib.h>
#define swapBytes16(x) _byteswap_ushort(x)
#define swapBytes32(x) _byteswap_ulong(x)
#define swapBytes64(x) _byteswap_uint64(x)
#endif

#if MPNW_LITTLE_ENDIAN
#define hostToNet16(x) swapBytes16(x)
#define hostToNet32(x) swapBytes32(x)
#define hostToNet64(x) swapBytes64(x)
#define netToHost16(x) swapBytes16(x)
#define netToHost32(x) swapBytes32(x)
#define netToHost64(x) swapBytes64(x)
#else
#define hostToNet16(x) (x)
#define hostToNet32(x) (x)
#define hostToNet64(x) (x)
#define netToHost16(x) (x)
#define netToHost32(x) (x)
#define netToHost64(x) (x)
#endif

typedef enum MpnwResult
{
	SUCCESS_MPNW_RESULT = 0,
	NETWORK_IS_NOT_INITIALIZED_MPNW_RESULT = 1,
	FAILED_TO_ALLOCATE_MPNW_RESULT = 2,
	FAILED_TO_CREATE_SOCKET_MPNW_RESULT = 3,
	FAILED_TO_BIND_SOCKET_MPNW_RESULT = 4,
	FAILED_TO_LISTEN_SOCKET_MPNW_RESULT = 5,
	FAILED_TO_ACCEPT_SOCKET_MPNW_RESULT = 6,
	FAILED_TO_CONNECT_SOCKET_MPNW_RESULT = 7,
	FAILED_TO_SET_SOCKET_FLAG_MPNW_RESULT = 8,
	FAILED_TO_GET_ADDRESS_INFO_MPNW_RESULT = 9,
	FAILED_TO_CREATE_SSL_MPNW_RESULT = 10,
	FAILED_TO_LOAD_CERTIFICATE_MPNW_RESULT = 11,
	NO_OPENSSL_SUPPORT_MPNW_RESULT = 12,
	MPNW_RESULT_COUNT = 13,
} MpnwResult;

static const char* const mpnwResultStrings[MPNW_RESULT_COUNT] = {
	"Success",
	"Network is not initialized",
	"Failed to allocate",
	"Failed to create socket",
	"Failed to bind socket",
	"Failed to listen socket",
	"Failed to accept socket",
	"Failed to connect socket",
	"Failed to set socket flag",
	"Failed to get address info",
	"Failed to create SSL",
	"Failed to load certificate",
};

inline static const char* mpnwResultToString(
	MpnwResult result)
{
	if (result < SUCCESS_MPNW_RESULT ||
		result >= MPNW_RESULT_COUNT)
	{
		return "Unknown pack result";
	}

	return mpnwResultStrings[result];
}

typedef struct StreamMessage
{
	uint8_t* buffer;
	size_t size;
	size_t offset;
} StreamMessage;

inline static StreamMessage createStreamMessage(
	uint8_t* buffer,
	size_t messageSize,
	uint8_t lengthSize)
{
	assert(buffer != NULL);
	assert(messageSize != 0);

	assert(
		(lengthSize == sizeof(uint8_t) && messageSize <= UINT8_MAX) ||
		(lengthSize == sizeof(uint16_t) && messageSize <= UINT16_MAX) ||
		(lengthSize == sizeof(uint32_t) && messageSize <= UINT32_MAX) ||
		(lengthSize == sizeof(uint64_t) && messageSize <= UINT64_MAX));

	StreamMessage streamMessage;
	streamMessage.buffer = buffer;

	if (lengthSize == sizeof(uint8_t))
	{
		buffer[0] = messageSize;
		streamMessage.size = messageSize + sizeof(uint8_t);
		streamMessage.offset = sizeof(uint8_t);
	}
	else if (lengthSize == sizeof(uint16_t))
	{
#if MPNW_LITTLE_ENDIAN
		*((uint16_t*)buffer) = messageSize;
#else
		*((uint16_t*)buffer) = swapBytes16(messageSize);
#endif
		streamMessage.size = messageSize + sizeof(uint16_t);
		streamMessage.offset = sizeof(uint16_t);
	}
	else if (lengthSize == sizeof(uint32_t))
	{
#if MPNW_LITTLE_ENDIAN
		*((uint32_t*)buffer) = messageSize;
#else
		*((uint32_t*)buffer) = swapBytes32(messageSize);
#endif
		streamMessage.size = messageSize + sizeof(uint32_t);
		streamMessage.offset = sizeof(uint32_t);
	}
	else if (lengthSize == sizeof(uint64_t))
	{
#if MPNW_LITTLE_ENDIAN
		*((uint64_t*)buffer) = messageSize;
#else
		*((uint64_t*)buffer) = swapBytes64(messageSize);
#endif
		streamMessage.size = messageSize + sizeof(uint64_t);
		streamMessage.offset = sizeof(uint64_t);
	}
    else
	{
		abort();
	}

	return streamMessage;
}
